
## 🛍️ Clothes Printing E-com Application (MERN)
### 📁 Client-Side Folder Structure

```
client/
├── public/
│   └── index.html
├── src/
│   ├── assets/                 # Static assets like logos, icons
│   │   └── logo.png
│
│   ├── components/             # Reusable UI components
│   │   ├── ui/
│   │   │   └── button.jsx
│   │   ├── Header.jsx
│   │   ├── Footer.jsx
│   │   ├── ProductCard.jsx
│   │   ├── CategoryCard.jsx
│   │   ├── Loader.jsx
│   │   ├── ProtectedRoute.jsx
│   │   ├── Toast.jsx
│   │   └── ImageUploader.jsx   # Cloudinary upload preview
│
│   ├── contexts/               # Context providers (global state)
│   │   ├── AuthContext.jsx
│   │   ├── CartContext.jsx
│   │   └── OrderContext.jsx
│
│   ├── hooks/                  # Custom React Hooks
│   │   ├── useAuth.js
│   │   ├── useScrollToTop.js
│   │   ├── useCart.js
│   │   └── useOrders.js
│
│   ├── pages/                  # Page-level components (Routes)
│   │   ├── Home.jsx
│   │   ├── Products.jsx
│   │   ├── ProductDetails.jsx
│   │   ├── Categories.jsx
│   │   ├── Cart.jsx
│   │   ├── Checkout.jsx
│   │   ├── Success.jsx
│   │   ├── Login.jsx
│   │   ├── Register.jsx
│   │   ├── Profile.jsx
│   │   ├── Admin/
│   │   │   ├── AddProduct.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   ├── ManageProducts.jsx
│   │   │   ├── ManageOrders.jsx
│   │   │   ├── ManageCategories.jsx
│   │   │   └── UploadDesigns.jsx
│   │   └── NotFound.jsx
│
│   ├── routes/                 # Route definitions
│   │   └── AppRoutes.jsx
│
│   ├── services/               # API communication layer (Axios)
│   │   ├── api.js
│   │   ├── authService.js
│   │   ├── productService.js
│   │   ├── cartService.js
│   │   ├── orderService.js
│   │   └── cloudinaryService.js
│
│   ├── stores/                 # Store management (Zustand)
│   │   ├── useAuthStore.jsx
│   │   ├── useCartStore.jsx
│   │   └── useOrderStore.jsx
│
│   ├── utils/                  # Utility/helper functions
│   │   ├── formatPrice.js
│   │   ├── validateEmail.js
│   │   ├── token.js            # JWT token helpers
│   │   └── uploadToCloudinary.js
│
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css               # Tailwind base styles
```

---

### 🧩 Client-Side Technologies Used

| Technology         | Purpose / Use                                                                 |
|--------------------|-------------------------------------------------------------------------------|
| React.js + Vite    | Frontend framework and fast build tool                                        |
| Tailwind CSS       | Utility-first CSS framework for modern UI design                              |
| Axios              | HTTP client to communicate with backend APIs                                  |
| Zustand            | Lightweight global state management (alternative to Redux)                    |
| JWT (Client-side)  | Store token in localStorage or cookies for protected routes                   |
| Stripe (UI)        | Secure payment interface on Checkout page (Stripe Elements / Checkout)        |
| Cloudinary         | Upload and preview product/design images before submission                    |
| Postman            | API testing tool (used during development to test client-server communication)|
| React Router DOM   | Routing for navigation between pages                                          |
| Context API        | Lightweight state management for auth, cart, and orders                       |

---

## 🛍️ Clothes Printing E-com Application (MERN)
### 📁 Server-Side Folder Structure

```
server/
├── controllers/              # Logic for handling requests and responses
│   ├── adminController.js
│   ├── authController.js
│   ├── orderController.js
│   └── productController.js  # Includes Cloudinary upload handling
│
├── lib/                      # External libraries and service config
│   ├── cloudinary.js         # Cloudinary configuration
│   ├── db.js                 # MongoDB connection setup
│   └── stripe.js             # Stripe configuration
│
├── middleware/              # Express middleware functions
│   ├── adminMiddleware.js    # Admin route protection
│   ├── authMiddleware.js     # JWT authentication checker
│   └── errorHandler.js       # Custom error handler
│
├── models/                  # Mongoose schema definitions
│   ├── Order.js
│   ├── User.js
│   └── Product.js
│
├── routes/                  # API route definitions
│   ├── admin.js
│   ├── authRoutes.js
│   ├── express.js            # App-level route definitions
│   ├── orders.js
│   └── products.js
│
├── utils/                   # Utility/helper functions
│   └── generateToken.js     # JWT token generator
│
├── .env                     # Environment variables (secret keys, DB URI)
└── server.js                # Entry point for Express server
```

---

### 🔧 Server-Side Technologies Used

| Technology         | Purpose / Use                                                                 |
|--------------------|-------------------------------------------------------------------------------|
| Node.js            | JavaScript runtime to run backend services                                    |
| Express.js         | Web framework to create REST APIs, handle routing & middleware                |
| MongoDB            | NoSQL database for storing users, orders, and product info                    |
| Mongoose           | ODM library to interact with MongoDB                                          |
| Cloudinary         | For image upload, hosting, and transformation                                 |
| Stripe             | Payment gateway integration and webhook handling                              |
| JWT(JSON Web Token)| Auth token creation and middleware protection for secure routes               |
| dotenv             | Loads environment variables from `.env` file securely                         |
| Postman            | API testing and debugging tool during development                             |
| CORS               | Middleware to handle cross-origin requests                                    |
| Bcrypt.js          | For hashing user passwords securely before saving to DB                       |
| Multer (optional)  | For handling file uploads to server (before passing to Cloudinary)            |

---
